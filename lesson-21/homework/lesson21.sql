--CREATE TABLE ProductSales (
--    SaleID INT PRIMARY KEY,
--    ProductName VARCHAR(50) NOT NULL,
--    SaleDate DATE NOT NULL,
--    SaleAmount DECIMAL(10, 2) NOT NULL,
--    Quantity INT NOT NULL,
--    CustomerID INT NOT NULL
--);
--INSERT INTO ProductSales (SaleID, ProductName, SaleDate, SaleAmount, Quantity, CustomerID)
--VALUES 
--(1, 'Product A', '2023-01-01', 148.00, 2, 101),
--(2, 'Product B', '2023-01-02', 202.00, 3, 102),
--(3, 'Product C', '2023-01-03', 248.00, 1, 103),
--(4, 'Product A', '2023-01-04', 149.50, 4, 101),
--(5, 'Product B', '2023-01-05', 203.00, 5, 104),
--(6, 'Product C', '2023-01-06', 252.00, 2, 105),
--(7, 'Product A', '2023-01-07', 151.00, 1, 101),
--(8, 'Product B', '2023-01-08', 205.00, 8, 102),
--(9, 'Product C', '2023-01-09', 253.00, 7, 106),
--(10, 'Product A', '2023-01-10', 152.00, 2, 107),
--(11, 'Product B', '2023-01-11', 207.00, 3, 108),
--(12, 'Product C', '2023-01-12', 249.00, 1, 109),
--(13, 'Product A', '2023-01-13', 153.00, 4, 110),
--(14, 'Product B', '2023-01-14', 208.50, 5, 111),
--(15, 'Product C', '2023-01-15', 251.00, 2, 112),
--(16, 'Product A', '2023-01-16', 154.00, 1, 113),
--(17, 'Product B', '2023-01-17', 210.00, 8, 114),
--(18, 'Product C', '2023-01-18', 254.00, 7, 115),
--(19, 'Product A', '2023-01-19', 155.00, 3, 116),
--(20, 'Product B', '2023-01-20', 211.00, 4, 117),
--(21, 'Product C', '2023-01-21', 256.00, 2, 118),
--(22, 'Product A', '2023-01-22', 157.00, 5, 119),
--(23, 'Product B', '2023-01-23', 213.00, 3, 120),
--(24, 'Product C', '2023-01-24', 255.00, 1, 121),
--(25, 'Product A', '2023-01-25', 158.00, 6, 122),
--(26, 'Product B', '2023-01-26', 215.00, 7, 123),
--(27, 'Product C', '2023-01-27', 257.00, 3, 124),
--(28, 'Product A', '2023-01-28', 159.50, 4, 125),
--(29, 'Product B', '2023-01-29', 218.00, 5, 126),
--(30, 'Product C', '2023-01-30', 258.00, 2, 127);

--1
select *, row_number() over(order by saledate) RW from productsales
--2
SELECT *, DENSE_RANK() OVER(ORDER BY QUANTITY DESC) FROM PRODUCTSALES
--3
SELECT *, ROW_NUMBER() OVER(ORDER BY SALEAMOUNT)
FROM PRODUCTSALES
--4
SELECT *, LEAD(SALEAMOUNT) OVER(ORDER BY SALEDATE)
FROM PRODUCTSALES
--5
SELECT *, LAG(SALEAMOUNT) OVER(ORDER BY SALEDATE)
FROM PRODUCTSALES
--6
SELECT *, LAG(SALEAMOUNT) OVER(ORDER BY SALEAMOUNT DESC)
FROM PRODUCTSALES
--7
WITH CTE AS(
SELECT *, LAG(SALEDATE) OVER(ORDER BY SALEDATE) RW
FROM PRODUCTSALES)
SELECT *, DATEDIFF(DAY, SALEDATE, RW)
FROM CTE
--8
WITH CTE AS(
SELECT *, LEAD(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) RW
FROM PRODUCTSALES)
SELECT *, RW - SALEAMOUNT
FROM CTE
--9

SELECT *, SALEAMOUNT/LAG(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) RW
FROM PRODUCTSALES
--10
SELECT *, LEAD(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) - SALEAMOUNT
FROM PRODUCTSALES
--11
WITH CTE AS(SELECT *, LEAD(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) RW
FROM PRODUCTSALES)
SELECT * FROM CTE
WHERE RW> SALEAMOUNT
--12
SELECT *, SUM(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) RW
FROM PRODUCTSALES
--13
SELECT *, AVG(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) RW
FROM PRODUCTSALES
--14
SELECT *, SALEAMOUNT - AVRG FROM PRODUCTSALES P
JOIN (SELECT SALEID, AVG(SALEAMOUNT) OVER(PARTITION BY PRODUCTNAME ORDER BY SALEDATE) AVRG
FROM PRODUCTSALES) A
ON P.SALEID = A.SALEID
--15
CREATE TABLE Employees1 (
    EmployeeID   INT PRIMARY KEY,
    Name         VARCHAR(50),
    Department   VARCHAR(50),
    Salary       DECIMAL(10,2),
    HireDate     DATE
);

INSERT INTO Employees1 (EmployeeID, Name, Department, Salary, HireDate) VALUES
(1, 'John Smith', 'IT', 60000.00, '2020-03-15'),
(2, 'Emma Johnson', 'HR', 50000.00, '2019-07-22'),
(3, 'Michael Brown', 'Finance', 75000.00, '2018-11-10'),
(4, 'Olivia Davis', 'Marketing', 55000.00, '2021-01-05'),
(5, 'William Wilson', 'IT', 62000.00, '2022-06-12'),
(6, 'Sophia Martinez', 'Finance', 77000.00, '2017-09-30'),
(7, 'James Anderson', 'HR', 52000.00, '2020-04-18'),
(8, 'Isabella Thomas', 'Marketing', 58000.00, '2019-08-25'),
(9, 'Benjamin Taylor', 'IT', 64000.00, '2021-11-17'),
(10, 'Charlotte Lee', 'Finance', 80000.00, '2016-05-09'),
(11, 'Ethan Harris', 'IT', 63000.00, '2023-02-14'),
(12, 'Mia Clark', 'HR', 53000.00, '2022-09-05'),
(13, 'Alexander Lewis', 'Finance', 78000.00, '2015-12-20'),
(14, 'Amelia Walker', 'Marketing', 57000.00, '2020-07-28'),
(15, 'Daniel Hall', 'IT', 61000.00, '2018-10-13'),
(16, 'Harper Allen', 'Finance', 79000.00, '2017-03-22'),
(17, 'Matthew Young', 'HR', 54000.00, '2021-06-30'),
(18, 'Ava King', 'Marketing', 56000.00, '2019-04-16'),
(19, 'Lucas Wright', 'IT', 65000.00, '2022-12-01'),
(20, 'Evelyn Scott', 'Finance', 81000.00, '2016-08-07');
--15
WITH RANKD AS(
SELECT *, RANK() OVER(ORDER BY SALARY DESC)RNK FROM EMPLOYEES1
)
SELECT * FROM RANKD R1
JOIN RANKD R2
ON R1.RNK = R2.RNK AND R1.EMPLOYEEID <> R2.EMPLOYEEID
--16
WITH CTE AS(
SELECT *, RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY) RNK
FROM EMPLOYEES1)
SELECT * FROM CTE
WHERE RNK<=2
--17
SELECT * FROM EMPLOYEES1 E
WHERE E.SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES1 WHERE DEPARTMENT = E.DEPARTMENT)
--18
SELECT *, SUM(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY)
FROM EMPLOYEES1
--19
WITH CTE AS(
SELECT *, SUM(SALARY) OVER(PARTITION BY DEPARTMENT ORDER BY SALARY)RW
FROM EMPLOYEES1)
SELECT DISTINCT DEPARTMENT, MAX(RW) OVER(PARTITION BY DEPARTMENT) FROM CTE
--20
WITH CTE AS(
SELECT *, AVG(SALARY) OVER(PARTITION BY DEPARTMENT) AVG
FROM EMPLOYEES1)
SELECT DISTINCT DEPARTMENT, AVG FROM CTE
--21
WITH CTE AS(
SELECT *, AVG(SALARY) OVER(PARTITION BY DEPARTMENT) AVG
FROM EMPLOYEES1)
SELECT ABS(AVG - SALARY) AS DIFF
FROM CTE
--22
SELECT *, AVG(SALARY) OVER(ORDER BY SALARY ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)
FROM EMPLOYEES1
--23
WITH CTE AS(
SELECT *, ROW_NUMBER() OVER(ORDER BY HIREDATE DESC) RW
FROM EMPLOYEES1)
SELECT SUM(SALARY)
FROM CTE
WHERE RW <= 3

